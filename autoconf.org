#+TITLE: Autoconf
#+AUTHOR: Evgey Posenitskiy, Anthony Scemama
#+LANGUAGE:  en
#+STARTUP: latexpreview

# OLD STYLE
###+HTML_HEAD: <link rel="stylesheet" title="Standard" href="worg.css" type="text/css" />
###+INFOJS_OPT: toc:t mouse:underline path:org-info.js

# Read the org
#+SETUPFILE: docs/org-html-themes/org/theme-readtheorg-local.setup

This page contains tutorial on the usage [[https://www.gnu.org/software/autoconf/][GNU Autoconf]]. 
This is the first part of the Autotools tutorial.

* Introduction

Building software on different platforms is a challenging task.
Re-building it a few years later is even more challenging.

Things get more complicated when the project introduces external dependencies 
(e.g. libraries that are installed independently and outside of the source tree).
Such dependencies can be located with some built-in tools like ~pkg-config~.
One could then modify the compilation flags to explicitly include installation paths, thus making the code compile on the current machine.
This approach works fine as long as the code has to be compiled only locally and as long as the dependency is not moved to a different directory.
However, the installation paths are likely to be different on another machine and the aforementioned build procedure might break. 

In this tutorial, we will learn how to configure a particular project using Autoconf.
This project consists of several ~C++~ source files, which are compiled into a single program using custom ~Makefile~.
We will learn how to configure and test the ~C++~ compiler before building the project.
The source files depend on the [[https://portal.hdfgroup.org/display/HDF5/HDF5][HDF5 library]], which is a good example of external dependency.
We will learn how to automatically locate the HDF5 library using macros.

Below is a source tree of our project. Header and source files can be found in the ~include/~ and ~src/~ directories, respectively.
The ~tests/~ directory contains the ~test_h5.cpp~ and ~dataset.hdf5~ files needed to test compilation of the aforementioned source code.

For this tutorial, the contents of the source and header files are not important. 
However, it is worth mentioning that they depend on the HDF5 library, which is not included in the source tree.
The goal is to demonstrate how cumbersome configuration/compilation steps can be facilitated by the use of **Autoconf**.


#+begin_src

Sherman-Morrison/
├─ include/
│  ├─ Helpers.hpp
│  ├─ SMWB.hpp
│  ├─ SM_Maroni.hpp
│  ├─ SM_Standard.hpp
│  ├─ Woodbury.hpp
├─ src/
│  ├─ Helpers.cpp
│  ├─ SMWB.cpp
│  ├─ SM_Maroni.cpp
│  ├─ SM_Standard.cpp
│  ├─ Woodbury.cpp
├─ tests/
│  ├─ test_h5.cpp
│  ├─ dataset.hdf5
├─ bin/
├─ Makefile
├─ README.md

#+end_src

* Step 1: Makefile

Let's have a look at the following part of our ~Makefile~:

#+begin_src
CXX      = g++
CPPFLAGS = -I./include/ -I/usr/include/hdf5/serial
CXXFLAGS = -g -O2 -std=c++11
LDFLAGS  = -L/usr/lib/x86_64-linux-gnu/hdf5/serial
LIBS     = -lhdf5 -lhdf5_cpp -lpthread -lz
#+end_src

**Question:** What are advantages and disadvantages of the aforementioned definitions?

** Possible answer

Here we explicitly require to use the ~C++~ compiler to be GNU C++ compiler (~g++~). 
However, what if the compiler is not present on the current machine ?
What if another compiler like ~icpc~ of Intel has to be used ?

* Step 2: configure.ac

* Step 3: Grande finale 
