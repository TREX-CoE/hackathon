#+TITLE: Autoconf
#+AUTHOR: Evgeny Posenitskiy, Anthony Scemama
#+LANGUAGE:  en

# OLD STYLE
# #+HTML_HEAD: <link rel="stylesheet" title="Standard" href="worg.css" type="text/css" />
# #+INFOJS_OPT: toc:t mouse:underline path:org-info.js

# Read the org
#+SETUPFILE: org-html-themes/org/theme-readtheorg-local.setup

This page contains the [[https://www.gnu.org/software/autoconf/][GNU Autoconf]] tutorial, which is the first part of the Autotools tutorial.

* Introduction

Building software on different platforms is a challenging task.
Re-building it a few years later is even more challenging.

Things get more complicated when the project introduces external dependencies
(e.g. libraries that are installed independently and outside of the source tree).
Such dependencies can be located with some built-in tools like ~pkg-config~.
One could then modify the compilation flags to explicitly include installation paths, thus making the code compile on the current machine.
This approach works fine as long as the code has to be compiled only locally and as long as the dependency is not moved to a different directory.
However, the installation paths are likely to be different on another machine and the aforementioned build procedure might break.

In this tutorial, we will learn how to configure a particular project using Autoconf.
This project consists of several ~C++~ source files, which are compiled into a single program using custom ~Makefile~.
We will learn how to configure and test the ~C++~ compiler before building the project.
The source files depend on the [[https://portal.hdfgroup.org/display/HDF5/HDF5][HDF5 library]], which is a good example of external dependency.
We will learn how to automatically locate the HDF5 library using macros.

Below is a source tree of our project. Header and source files can be found in the ~include/~ and ~src/~ directories, respectively.
The ~tests/~ directory contains the ~test_h5.cpp~ and ~dataset.hdf5~ files needed to test compilation of the aforementioned source code.

For this tutorial, the contents of the source and header files are not important.
However, it is worth mentioning that they depend on the HDF5 library, which is not included in the source tree.
The goal is to demonstrate how cumbersome configuration/compilation steps can be facilitated by the use of **Autoconf**.


#+begin_src text
Sherman-Morrison/
├─ include/
│  ├─ Helpers.hpp
│  ├─ SMWB.hpp
│  ├─ SM_Maroni.hpp
│  ├─ SM_Standard.hpp
│  ├─ Woodbury.hpp
├─ src/
│  ├─ Helpers.cpp
│  ├─ SMWB.cpp
│  ├─ SM_Maroni.cpp
│  ├─ SM_Standard.cpp
│  ├─ Woodbury.cpp
├─ tests/
│  ├─ test_h5.cpp
│  ├─ dataset.hdf5
├─ bin/
├─ Makefile
├─ README.md
#+end_src

* Makefile

Below is the ~Makefile~ of our project:

#+begin_src makefile
## Specify the C++ compiler as well as preprocessor, compiler and linking flags
CXX      = g++
CPPFLAGS = -I./include/ -I/usr/include/hdf5/serial
CXXFLAGS = -g -O2 -std=c++11
LDFLAGS  = -L/usr/lib/x86_64-linux-gnu/hdf5/serial
LIBS     = -lhdf5 -lhdf5_cpp -lpthread -lz

## Directory structure
SRC_DIR := src
TST_DIR := tests
INC_DIR := include
BIN_DIR := bin

EXEC    := $(BIN_DIR)/test_h5

## Dependencies
DEPS_CXX = $(SRC_DIR)/SM_Maponi.o \
           $(SRC_DIR)/SM_Standard.o \
           $(SRC_DIR)/Woodbury.o \
           $(SRC_DIR)/SMWB.o \
           $(SRC_DIR)/Helpers.o

## Build tagets
.PHONY: all clean

all: $(EXEC)

clean:
        @rm -rf -- $(SRC_DIR)/*.o $(TST_DIR)/*.o $(EXEC)

## Compiling dependencies
.SUFFIXES: .cpp .o

## Linking
$(BIN_DIR)/test_h5: $(DEPS_CXX) $(TST_DIR)/test_h5.o
        $(CXX) $(CPPFLAGS) $(CXXFLAGS) $(TST_DIR)/test_h5.o $(DEPS_CXX) -o $(EXEC) $(LDFLAGS) $(LIBS)
#+end_src

Let's execute **make** command and examine the output:

#+begin_src
g++ -g -O2 -std=c++11 -I./include/ -I/usr/include/hdf5/serial   -c -o src/SM_Maponi.o src/SM_Maponi.cpp
g++ -g -O2 -std=c++11 -I./include/ -I/usr/include/hdf5/serial   -c -o src/SM_Standard.o src/SM_Standard.cpp
g++ -g -O2 -std=c++11 -I./include/ -I/usr/include/hdf5/serial   -c -o src/Woodbury.o src/Woodbury.cpp
g++ -g -O2 -std=c++11 -I./include/ -I/usr/include/hdf5/serial   -c -o src/SMWB.o src/SMWB.cpp
g++ -g -O2 -std=c++11 -I./include/ -I/usr/include/hdf5/serial   -c -o src/Helpers.o src/Helpers.cpp
g++ -g -O2 -std=c++11 -I./include/ -I/usr/include/hdf5/serial   -c -o tests/test_h5.o tests/test_h5.cpp
g++ -I./include/ -I/usr/include/hdf5/serial  -g -O2 -std=c++11 tests/test_h5.o src/SM_Maponi.o src/SM_Standard.o src/Woodbury.o src/SMWB.o src/Helpers.o -o bin/test_h5  -L/usr/lib/x86_64-linux-gnu/hdf5/serial -lhdf5 -lhdf5_cpp -lpthread -lz 
#+end_src

So it works. We can already see that ~.o~ object files are compiled first since they are indicated as dependencies
of the ~$(BIN_DIR)/test_h5~ target, which is compiled and linked at the very end.

Let's have a look at the following part of our ~Makefile~:

#+begin_src makefile
CXX      = g++
CXXFLAGS = -g -O2 -std=c++11
CPPFLAGS = -I./include/ -I/usr/include/hdf5/serial
LDFLAGS  = -L/usr/lib/x86_64-linux-gnu/hdf5/serial
LIBS     = -lhdf5 -lhdf5_cpp -lpthread -lz
#+end_src

**Question:** What are advantages and disadvantages of specifying compiler flags as above? 

Among other things, the crucial issue here is the portability of the hard-coded paths to HDF5 (see ~CPPFLAGS~ and ~LDFLAGS~).

Moreover, in this example, we provide all the flags already. 
However, in real life, defining them is challenging, especially for programs with external dependencies.

Wouldn't it be nice if we could automatize this process? Well, this is where **Autoconf** comes into play.

* configure

In this section, we will talk about several files:

- configure.ac
- configure
- Makefile.in
- Makefile

The ultimate goal of the **Autoconf** is to produce the **configure** script based on the *configure.ac* file.
The **configure** script then detects the **Makefile.in** file and replaces some variables there to produce
the final **Makefile**, which is used to build a project.  

TODO: PICTURE HERE

Confused? Don't worry, we will start from the minimal example.

Let's create the ~configure.ac~ file with the following contents:

#+begin_src makefile
#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

#initialize autoconf
AC_INIT([sherman-morrison], [0.0.1], [])

AC_OUTPUT
#+end_src

Here we provided the name of our project [sherman-morrison] and the current version [0.0.1] to the ~AC_INIT~ macro.
These are now stored in the ~$PACKAGE_NAME~ and ~$PACKAGE_VERSION~ variables, respectively.
We will not cover the details of the M4 syntax that is used internally by the Autoconf.
For more information, see the [[https://www.gnu.org/software/autoconf/manual/autoconf-2.69/html_node/index.html][Autoconf documentation page]].

We know the the source code is written in ~C++~. 
Thus, we would like the Autoconf to find and possibly run some checks 
using the~C++~ compiler that is available on the current machine.

Let's add a few additional macros for that and examine their output:

#+begin_src makefile
#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

#initialize autoconf
AC_INIT([sherman-morrison], [0.0.1], [])

# do the tests with C++ flags
AC_LANG(C++)
# search for the C++ compiler
AC_PROG_CXX
# check if the C++ compiler accepts -c and -o simultaneously
AC_PROG_CXX_C_O

AC_OUTPUT

echo \
"-------------------------------------------------

${PACKAGE_NAME} Version ${PACKAGE_VERSION}

CXX ...........:  ${CXX}
CXXFLAGS ......:  ${CXXFLAGS}

--------------------------------------------------"
#+end_src

The contents of the current directory should be as follows:

~bin/  configure.ac  include/  Makefile  README.md  src/  tests/~

Now run ~autoreconf~ command in your terminal and examine the directory again.
After succesfull exection, a **configure** shell script should appear.

Let's run it by calling ~./configure~. 
Several checks have been performed by **Autoconf** and in the end one might get the following:

#+begin_src makefile
-------------------------------------------------

sherman-morrison Version 0.0.1

CXX ...........:  g++
CXXFLAGS ......:  -g -O2

--------------------------------------------------
#+end_src 

In the example of output above, the **configure** script has detected ~g++~ compiler and expanded the
~${CXX}~ variable with the corresponding compiler name. 
Moreover, the script detects the defaul ~C++~ compiler flags of ~g++~ and adds them to ~${CXXFLAGS}~.

From now on we will work mostly with shell variables and call to the Autoconf macros.

/Note/: whenever you make a change in ~configure.ac~, 
execute ~autoreconf -i~ to update the generated ~configure~ script.

The **configure** script can also define its own variables (e.g. ~$PACKAGE_NAME~ above) and pass them to other files.
To benefit from the previously detected ~C++~ compiler and its flags, let's propagate them to ~Makefile~.

This requires 2 actions:

- Move ~Makefile~ to ~Makefile.in~ (this is the standard naming convention in Autotools) and replace the hard-coded variables with the ones defined by **configure**. For example, ~CXX = g++~ should be replaced by ~CXX = @CXX@~. Variables in between ~@~ signs are called substitutation variables.
- Indicate to Autoconf that ~Makefile~ is now its responsibility (due to the variables that will be substituted by ~./configure~ call) by adding ~AC_CONFIG_FILES([Makefile])~.

~configure.ac~:
#+begin_src makefile
#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

#initialize autoconf
AC_INIT([sherman-morrison], [0.0.1], [])

# do the tests with C++ flags
AC_LANG(C++)
# search for the C++ compiler
AC_PROG_CXX
# check if the C++ compiler accepts -c and -o simultaneously
AC_PROG_CXX_C_O

AC_CONFIG_FILES([Makefile])

AC_OUTPUT

echo \
"-------------------------------------------------

${PACKAGE_NAME} Version ${PACKAGE_VERSION}

CXX ...........:  ${CXX}
CXXFLAGS ......:  ${CXXFLAGS}

--------------------------------------------------"
#+end_src

~Makefile.in~ (only the top part has to be changed at the moment):
#+begin_src makefile
CXX      = @CXX@
CXXFLAGS = @CXXFLAGS@ -std=c++11
CPPFLAGS = -I./include/ -I/usr/include/hdf5/serial
LDFLAGS  = -L/usr/lib/x86_64-linux-gnu/hdf5/serial
LIBS     = -lhdf5 -lhdf5_cpp -lpthread -lz
...........
#+end_src

Let's reconfigure (~autoreconf -i && ./configure~) and examine the changes between the input
~Makefile.in~ and output ~Makefile~ (you can use ~diff~ or ~vimdiff~ for example):

#+begin_src shell
$ diff Makefile.in Makefile

< CXX      = @CXX@
< CXXFLAGS = @CXXFLAGS@ -std=c++11
---
> CXX      = g++
> CXXFLAGS = -g -O2 -std=c++11
#+end_src
 
This tells us that the substitution variables ~@CXX@~ and ~@CXXFLAGS@~ have been replaced 
by ~g++~ and ~-g -O2~, respectively.

Good, but we still have these hard-coded paths to HDF5 library in ~CPPFLAGS~ and ~LDFLAGS~.
Let's try to find this library using Autoconf solutions.

** Detecting external dependencies

* Conclusion
